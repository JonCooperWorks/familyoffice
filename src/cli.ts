#!/usr/bin/env node

import { Command } from 'commander';
import * as dotenv from 'dotenv';
import * as readline from 'readline';
import { AgentService } from './services/agentService.js';

// Load environment variables
dotenv.config();

const program = new Command();

program
  .name('familyoffice')
  .description('AI-powered stock research and chat agent')
  .version('1.0.0');

program
  .command('research <ticker>')
  .description('Generate a comprehensive research report for a stock')
  .option('-c, --company <company>', 'Company name (optional, will be looked up if not provided)')
  .option('-o, --output <file>', 'Output file path (default: research-{ticker}-{timestamp}.md)')
  .option('-r, --report <file>', 'Existing report to reevaluate (will fact-check and update the claims)')
  .option('-d, --debug', 'Enable debug logging')
  .action(async (ticker: string, options) => {
    ticker = ticker.toUpperCase();
    const companyName = options.company || ticker; // Use ticker if company name not provided
    
    // Load existing report if provided
    let reportContent: string | undefined;
    if (options.report) {
      try {
        const fs = await import('fs/promises');
        reportContent = await fs.readFile(options.report, 'utf-8');
        console.log(`üìÑ Loaded existing report: ${options.report}`);
        console.log('   Starting reevaluation with current information...\n');
      } catch (error) {
        console.error(`‚ùå Error loading report: ${(error as Error).message}`);
        process.exit(1);
      }
    }
    
    try {
      const agent = new AgentService({ debug: options.debug });
      
      // Use reevaluate if report provided, otherwise regular research
      const result = reportContent 
        ? await agent.reevaluate({ companyName, ticker }, reportContent)
        : await agent.research({ companyName, ticker });
      
      // Generate output filename with timestamp
      let outputFile = options.output;
      if (!outputFile) {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
        outputFile = `research-${ticker}-${timestamp}.md`;
      }
      
      // Prepare the full report
      const reportType = reportContent ? 'Reevaluation Report' : 'Research Report';
      const fullReport = [
        `# ${reportType}`,
        `**Company:** ${companyName}`,
        `**Ticker:** ${ticker}`,
        `**Date:** ${new Date().toLocaleString()}`,
        ...(options.report ? [`**Original Report:** ${options.report}`] : []),
        '',
        '---',
        '',
        result,
        '',
        '---',
        `*Generated by Family Office Research Agent*`,
        ...(reportContent ? [`*Reevaluation of existing report*`] : [])
      ].join('\n');
      
      // Write to file
      const fs = await import('fs/promises');
      await fs.writeFile(outputFile, fullReport);
      
      console.log('\n' + '='.repeat(80));
      console.log(`‚úÖ ${reportType} saved to: ${outputFile}`);
      console.log('='.repeat(80) + '\n');
    } catch (error) {
      console.error('‚ùå Error:', (error as Error).message);
      process.exit(1);
    }
  });

program
  .command('reevaluate <ticker>')
  .description('Reevaluate an existing research report with current information')
  .requiredOption('-r, --report <file>', 'Existing report file to reevaluate')
  .option('-c, --company <company>', 'Company name (optional, will be looked up if not provided)')
  .option('-o, --output <file>', 'Output file path (default: reevaluation-{ticker}-{timestamp}.md)')
  .option('-d, --debug', 'Enable debug logging')
  .action(async (ticker: string, options) => {
    ticker = ticker.toUpperCase();
    const companyName = options.company || ticker;
    
    // Load existing report
    let reportContent: string;
    try {
      const fs = await import('fs/promises');
      reportContent = await fs.readFile(options.report, 'utf-8');
      console.log(`üìÑ Loaded existing report: ${options.report}`);
      console.log('   Starting reevaluation with current information...\n');
    } catch (error) {
      console.error(`‚ùå Error loading report: ${(error as Error).message}`);
      process.exit(1);
    }
    
    try {
      const agent = new AgentService({ debug: options.debug });
      const result = await agent.reevaluate({ companyName, ticker }, reportContent);
      
      // Generate output filename with timestamp
      let outputFile = options.output;
      if (!outputFile) {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
        outputFile = `research-${ticker}-${timestamp}.md`;
      }
      
      // Prepare the full report
      const fullReport = [
        '# Reevaluation Report',
        `**Company:** ${companyName}`,
        `**Ticker:** ${ticker}`,
        `**Date:** ${new Date().toLocaleString()}`,
        `**Original Report:** ${options.report}`,
        '',
        '---',
        '',
        result,
        '',
        '---',
        `*Generated by Family Office Research Agent*`,
        `*Reevaluation of existing report*`
      ].join('\n');
      
      // Write to file
      const fs = await import('fs/promises');
      await fs.writeFile(outputFile, fullReport);
      
      console.log('\n' + '='.repeat(80));
      console.log(`‚úÖ Reevaluation report saved to: ${outputFile}`);
      console.log('='.repeat(80) + '\n');
    } catch (error) {
      console.error('‚ùå Error:', (error as Error).message);
      process.exit(1);
    }
  });

program
  .command('chat <ticker>')
  .description('Start an interactive chat about a stock')
  .option('-r, --report <file>', 'Load a research report file into the chat context')
  .action(async (ticker: string, options: { report?: string }) => {
    ticker = ticker.toUpperCase();
    let reportContent: string | undefined;
    let reportPath: string | undefined = options.report;
    const companyName = ticker; // Could be extracted from report if needed

    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    });

    // Load report if provided
    if (options.report) {
      try {
        const fs = await import('fs/promises');
        reportContent = await fs.readFile(options.report, 'utf-8');
        console.log(`üìÑ Loaded report: ${options.report}`);
      } catch (error) {
        console.error(`‚ùå Error loading report: ${(error as Error).message}`);
        process.exit(1);
      }
    }

    console.log(`\nüí¨ Starting chat about ${ticker}`);
    if (reportContent) {
      console.log('   With research report context loaded');
    }
    console.log('Type your questions (type "/exit" or "/quit" to end the chat)');
    console.log('Type "/update-report" to save an updated version of the report\n');

    const agent = new AgentService();

    const askQuestion = () => {
      rl.question(`You: `, async (input) => {
        const message = input.trim();
        
        if (message.toLowerCase() === '/exit' || message.toLowerCase() === '/quit') {
          console.log('\nüëã Goodbye!');
          rl.close();
          await agent.cleanup();
          process.exit(0);
        }

        if (message.toLowerCase() === '/update-report') {
          console.log('\nüìù Generating updated report based on our conversation...\n');
          
          try {
            const updatedReport = await agent.updateReport(ticker);
            
            // Generate output filename with timestamp
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
            const outputFile = reportPath || `research-${ticker}-${timestamp}.md`;
            
            // Prepare the full report
            const fullReport = [
              '# Research Report',
              `**Company:** ${companyName}`,
              `**Ticker:** ${ticker}`,
              `**Date:** ${new Date().toLocaleString()}`,
              `**Updated:** ${new Date().toLocaleString()}`,
              '',
              '---',
              '',
              updatedReport,
              '',
              '---',
              `*Generated by Family Office Research Agent*`,
              `*Updated during chat session*`
            ].join('\n');
            
            // Write to file
            const fs = await import('fs/promises');
            await fs.writeFile(outputFile, fullReport);
            
            console.log(`‚úÖ Updated report saved to: ${outputFile}\n`);
            reportPath = outputFile;
          } catch (error) {
            console.error('‚ùå Error updating report:', (error as Error).message);
          }
          
          askQuestion();
          return;
        }

        if (!message) {
          askQuestion();
          return;
        }

        try {
          console.log('\nü§ñ Assistant: ');
          const response = await agent.chat(ticker, message, reportContent);
          console.log(response);
          console.log('');
          
          // Clear report content after first use so it doesn't get re-sent
          reportContent = undefined;
          
          askQuestion();
        } catch (error) {
          console.error('‚ùå Error:', (error as Error).message);
          askQuestion();
        }
      });
    };

    askQuestion();
  });

// Handle no command
if (process.argv.length === 2) {
  program.help();
}

program.parse(process.argv);

